"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = require("./utils");

var EMAIL_REGEX = /\S+@\S+\.\S+/;
var MOBILE_REGEX = /^\+[0-9\s]+/;
var KEY_PUSHVENDOR = "$pushvendor";
var CHANNEL_MAP = {
  EMAIL: "$email",
  SMS: "$sms",
  WHATSAPP: "$whatsapp",
  ANDROID_PUSH: "$androidpush",
  IOS_PUSH: "$iospush",
  WEB_PUSH: "$webpush"
};
var ANDROID_PUSH_VENDORS = ["fcm", "xiaomi", "oppo"];
var IOS_PUSH_VENDORS = ["apns"];
var WEB_PUSH_VENDORS = ["vapid"];

var _IdentityEventInternalHelper = /*#__PURE__*/function () {
  function _IdentityEventInternalHelper(distinct_id, workspace_key) {
    (0, _classCallCheck2["default"])(this, _IdentityEventInternalHelper);
    this.distinct_id = distinct_id;
    this.workspace_key = workspace_key;
    this.__dict_append = {};
    this.__append_count = 0;
    this.__dict_remove = {};
    this.__remove_count = 0;
    this.__list_unset = [];
    this.__unset_count = 0;
    this.__errors = [];
    this.__info = [];
  }

  (0, _createClass2["default"])(_IdentityEventInternalHelper, [{
    key: "reset",
    value: function reset() {
      this.__dict_append = {};
      this.__append_count = 0;
      this.__dict_remove = {};
      this.__remove_count = 0;
      this.__list_unset = [];
      this.__unset_count = 0;
      this.__errors = [];
      this.__info = [];
    }
  }, {
    key: "get_identity_events",
    value: function get_identity_events() {
      var evt = this.__form_event();

      var ret_val = {
        errors: this.__errors,
        info: this.__info,
        event: evt,
        append: this.__append_count,
        remove: this.__remove_count,
        unset: this.__unset_count
      };
      this.reset();
      return ret_val;
    }
  }, {
    key: "__form_event",
    value: function __form_event() {
      if (!(0, _utils.is_empty)(this.__dict_append) || !(0, _utils.is_empty)(this.__dict_remove)) {
        var event = {
          $insert_id: (0, _utils.uuid)(),
          $time: (0, _utils.epoch_milliseconds)(),
          env: this.workspace_key,
          distinct_id: this.distinct_id
        };

        if (!(0, _utils.is_empty)(this.__dict_append)) {
          event["$append"] = this.__dict_append;
          this.__append_count += 1;
        }

        if (!(0, _utils.is_empty)(this.__dict_remove)) {
          event["$remove"] = this.__dict_remove;
          this.__remove_count += 1;
        }

        return event;
      }

      return;
    }
  }, {
    key: "__validate_key_basic",
    value: function __validate_key_basic(key, caller) {
      if (!(0, _utils.is_string)(key)) {
        this.__info.push("[".concat(caller, "] skipping key: ").concat(key, ". key must be a string"));

        return [key, false];
      }

      key = key.trim();

      if (!key) {
        this.__info.push("[".concat(caller, "] skipping key: empty string"));

        return [key, false];
      }

      return [key, true];
    }
  }, {
    key: "__validate_key_prefix",
    value: function __validate_key_prefix(key, caller) {
      if (!this.__is_identity_key(key)) {
        if ((0, _utils.has_special_char)(key)) {
          this.__info.push("[".concat(caller, "] skipping key: ").concat(key, ". key starting with [$,ss_] are reserved"));

          return false;
        }
      }

      return true;
    }
  }, {
    key: "__is_identity_key",
    value: function __is_identity_key(key) {
      return Object.values(CHANNEL_MAP).includes(key);
    }
  }, {
    key: "_append_kv",
    value: function _append_kv(key, value) {
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var caller = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "append";

      var _this$__validate_key_ = this.__validate_key_basic(key, caller),
          _this$__validate_key_2 = (0, _slicedToArray2["default"])(_this$__validate_key_, 2),
          validated_key = _this$__validate_key_2[0],
          is_valid = _this$__validate_key_2[1];

      if (!is_valid) {
        return;
      }

      if (this.__is_identity_key(validated_key)) {
        this.__add_identity(validated_key, value, args, caller);
      } else {
        var _is_valid = this.__validate_key_prefix(validated_key, caller);

        if (_is_valid) {
          this.__dict_append[validated_key] = value;
        }
      }
    }
  }, {
    key: "_remove_kv",
    value: function _remove_kv(key, value) {
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var caller = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "remove";

      var _this$__validate_key_3 = this.__validate_key_basic(key, caller),
          _this$__validate_key_4 = (0, _slicedToArray2["default"])(_this$__validate_key_3, 2),
          validated_key = _this$__validate_key_4[0],
          is_valid = _this$__validate_key_4[1];

      if (!is_valid) {
        return;
      }

      if (this.__is_identity_key(validated_key)) {
        this.__remove_identity(validated_key, value, args, caller);
      } else {
        var _is_valid2 = this.__validate_key_prefix(validated_key, caller);

        if (_is_valid2) {
          this.__dict_remove[validated_key] = value;
        }
      }
    }
  }, {
    key: "__add_identity",
    value: function __add_identity(key, value, args, caller) {
      switch (key) {
        case CHANNEL_MAP.EMAIL:
          this._add_email(value, caller);

          break;

        case CHANNEL_MAP.SMS:
          this._add_sms(value, caller);

          break;

        case CHANNEL_MAP.WHATSAPP:
          this._add_whatsapp(value, caller);

          break;

        case CHANNEL_MAP.ANDROID_PUSH:
          this._add_androidpush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_append[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_append[KEY_PUSHVENDOR];
          }

          break;

        case CHANNEL_MAP.IOS_PUSH:
          this._add_iospush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_append[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_append[KEY_PUSHVENDOR];
          }

          break;

        case CHANNEL_MAP.WEB_PUSH:
          this._add_webpush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_append[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_append[KEY_PUSHVENDOR];
          }

          break;

        default:
          break;
      }
    }
  }, {
    key: "__remove_identity",
    value: function __remove_identity(key, value, args, caller) {
      switch (key) {
        case CHANNEL_MAP.EMAIL:
          this._remove_email(value, caller);

          break;

        case CHANNEL_MAP.SMS:
          this._remove_sms(value, caller);

          break;

        case CHANNEL_MAP.WHATSAPP:
          this._remove_whatsapp(value, caller);

          break;

        case CHANNEL_MAP.ANDROID_PUSH:
          this._remove_androidpush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_remove[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_remove[KEY_PUSHVENDOR];
          }

          break;

        case CHANNEL_MAP.IOS_PUSH:
          this._remove_iospush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_remove[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_remove[KEY_PUSHVENDOR];
          }

          break;

        case CHANNEL_MAP.WEB_PUSH:
          this._remove_webpush(value, args[KEY_PUSHVENDOR], caller);

          if (this.__dict_remove[KEY_PUSHVENDOR]) {
            args[KEY_PUSHVENDOR] = this.__dict_remove[KEY_PUSHVENDOR];
          }

          break;

        default:
          break;
      }
    }
  }, {
    key: "__check_ident_val_string",
    value: function __check_ident_val_string(value, caller) {
      var message = "value must a string with proper value";

      if (!(0, _utils.is_string)(value)) {
        this.__errors.push("[".concat(caller, "] ").concat(message));

        return [value, false];
      }

      value = value.trim();

      if (!value) {
        this.__errors.push("[".concat(caller, "] ").concat(message));

        return [value, false];
      }

      return [value, true];
    } // email methods

  }, {
    key: "__validate_email",
    value: function __validate_email(value, caller) {
      var _this$__check_ident_v = this.__check_ident_val_string(value, caller),
          _this$__check_ident_v2 = (0, _slicedToArray2["default"])(_this$__check_ident_v, 2),
          email = _this$__check_ident_v2[0],
          is_valid = _this$__check_ident_v2[1];

      if (!is_valid) {
        return [email, false];
      }

      var message = "value in email format required. e.g. user@example.com";
      var min_length = 6;
      var max_length = 127;
      var is_valid_email = EMAIL_REGEX.test(email);

      if (!is_valid_email) {
        this.__errors.push("[".concat(caller, "] invalid value ").concat(email, ". ").concat(message));

        return [email, false];
      }

      if (email.length < min_length || email.length > max_length) {
        this.__errors.push("[".concat(caller, "] invalid value ").concat(email, ". must be 6 <= email.length <= 127"));

        return [email, false];
      }

      return [email, true];
    }
  }, {
    key: "_add_email",
    value: function _add_email(email, caller) {
      var _this$__validate_emai = this.__validate_email(email, caller),
          _this$__validate_emai2 = (0, _slicedToArray2["default"])(_this$__validate_emai, 2),
          value = _this$__validate_emai2[0],
          is_valid = _this$__validate_emai2[1];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.EMAIL] = value;
    }
  }, {
    key: "_remove_email",
    value: function _remove_email(email, caller) {
      var _this$__validate_emai3 = this.__validate_email(email, caller),
          _this$__validate_emai4 = (0, _slicedToArray2["default"])(_this$__validate_emai3, 2),
          value = _this$__validate_emai4[0],
          is_valid = _this$__validate_emai4[1];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.EMAIL] = value;
    } // mobile methods

  }, {
    key: "__validate_mobile_no",
    value: function __validate_mobile_no(value, caller) {
      var _this$__check_ident_v3 = this.__check_ident_val_string(value, caller),
          _this$__check_ident_v4 = (0, _slicedToArray2["default"])(_this$__check_ident_v3, 2),
          mobile = _this$__check_ident_v4[0],
          is_valid = _this$__check_ident_v4[1];

      if (!is_valid) {
        return [mobile, false];
      }

      var message = "number must start with + and must contain country code. e.g. +41446681800";
      var min_length = 8;
      var is_valid_mobile = MOBILE_REGEX.test(mobile);

      if (!is_valid_mobile) {
        this.__errors.push("[".concat(caller, "] invalid value ").concat(mobile, ". ").concat(message));

        return [mobile, false];
      }

      if (mobile.length < min_length) {
        this.__errors.push("[".concat(caller, "] invalid value ").concat(mobile, ". mobile_no.length must be >= 8"));

        return [mobile, false];
      }

      return [mobile, true];
    }
  }, {
    key: "_add_sms",
    value: function _add_sms(mobile_no, caller) {
      var _this$__validate_mobi = this.__validate_mobile_no(mobile_no, caller),
          _this$__validate_mobi2 = (0, _slicedToArray2["default"])(_this$__validate_mobi, 2),
          value = _this$__validate_mobi2[0],
          is_valid = _this$__validate_mobi2[1];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.SMS] = value;
    }
  }, {
    key: "_remove_sms",
    value: function _remove_sms(mobile_no, caller) {
      var _this$__validate_mobi3 = this.__validate_mobile_no(mobile_no, caller),
          _this$__validate_mobi4 = (0, _slicedToArray2["default"])(_this$__validate_mobi3, 2),
          value = _this$__validate_mobi4[0],
          is_valid = _this$__validate_mobi4[1];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.SMS] = value;
    }
  }, {
    key: "_add_whatsapp",
    value: function _add_whatsapp(mobile_no, caller) {
      var _this$__validate_mobi5 = this.__validate_mobile_no(mobile_no, caller),
          _this$__validate_mobi6 = (0, _slicedToArray2["default"])(_this$__validate_mobi5, 2),
          value = _this$__validate_mobi6[0],
          is_valid = _this$__validate_mobi6[1];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.WHATSAPP] = value;
    }
  }, {
    key: "_remove_whatsapp",
    value: function _remove_whatsapp(mobile_no, caller) {
      var _this$__validate_mobi7 = this.__validate_mobile_no(mobile_no, caller),
          _this$__validate_mobi8 = (0, _slicedToArray2["default"])(_this$__validate_mobi7, 2),
          value = _this$__validate_mobi8[0],
          is_valid = _this$__validate_mobi8[1];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.WHATSAPP] = value;
    } // android push methods

  }, {
    key: "__check_androidpush_value",
    value: function __check_androidpush_value(value, provider, caller) {
      var _this$__check_ident_v5 = this.__check_ident_val_string(value, caller),
          _this$__check_ident_v6 = (0, _slicedToArray2["default"])(_this$__check_ident_v5, 2),
          push_token = _this$__check_ident_v6[0],
          is_valid = _this$__check_ident_v6[1];

      if (!is_valid) {
        return [push_token, provider, false];
      }

      if (!provider) {
        provider = "fcm";
      }

      if (!ANDROID_PUSH_VENDORS.includes(provider)) {
        this.__errors.push("[".concat(caller, "] unsupported androidpush provider ").concat(provider));

        return [push_token, provider, false];
      }

      return [push_token, provider, true];
    }
  }, {
    key: "_add_androidpush",
    value: function _add_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = arguments.length > 2 ? arguments[2] : undefined;

      var _this$__check_android = this.__check_androidpush_value(push_token, provider, caller),
          _this$__check_android2 = (0, _slicedToArray2["default"])(_this$__check_android, 3),
          value = _this$__check_android2[0],
          vendor = _this$__check_android2[1],
          is_valid = _this$__check_android2[2];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.ANDROID_PUSH] = value;
      this.__dict_append[KEY_PUSHVENDOR] = vendor;
    }
  }, {
    key: "_remove_androidpush",
    value: function _remove_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = "remove_androidpush";

      var _this$__check_android3 = this.__check_androidpush_value(push_token, provider, caller),
          _this$__check_android4 = (0, _slicedToArray2["default"])(_this$__check_android3, 3),
          value = _this$__check_android4[0],
          vendor = _this$__check_android4[1],
          is_valid = _this$__check_android4[2];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.ANDROID_PUSH] = value;
      this.__dict_remove[KEY_PUSHVENDOR] = vendor;
    } // ios push methods

  }, {
    key: "__check_iospush_value",
    value: function __check_iospush_value(value, provider, caller) {
      var _this$__check_ident_v7 = this.__check_ident_val_string(value, caller),
          _this$__check_ident_v8 = (0, _slicedToArray2["default"])(_this$__check_ident_v7, 2),
          push_token = _this$__check_ident_v8[0],
          is_valid = _this$__check_ident_v8[1];

      if (!is_valid) {
        return [push_token, provider, false];
      }

      if (!provider) {
        provider = "apns";
      }

      if (!IOS_PUSH_VENDORS.includes(provider)) {
        this.__errors.push("[".concat(caller, "] unsupported iospush provider ").concat(provider));

        return [push_token, provider, false];
      }

      return [push_token, provider, true];
    }
  }, {
    key: "_add_iospush",
    value: function _add_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = arguments.length > 2 ? arguments[2] : undefined;

      var _this$__check_iospush = this.__check_iospush_value(push_token, provider, caller),
          _this$__check_iospush2 = (0, _slicedToArray2["default"])(_this$__check_iospush, 3),
          value = _this$__check_iospush2[0],
          vendor = _this$__check_iospush2[1],
          is_valid = _this$__check_iospush2[2];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.IOS_PUSH] = value;
      this.__dict_append[KEY_PUSHVENDOR] = vendor;
    }
  }, {
    key: "_remove_iospush",
    value: function _remove_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = arguments.length > 2 ? arguments[2] : undefined;

      var _this$__check_iospush3 = this.__check_iospush_value(push_token, provider, caller),
          _this$__check_iospush4 = (0, _slicedToArray2["default"])(_this$__check_iospush3, 3),
          value = _this$__check_iospush4[0],
          vendor = _this$__check_iospush4[1],
          is_valid = _this$__check_iospush4[2];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.IOS_PUSH] = value;
      this.__dict_remove[KEY_PUSHVENDOR] = vendor;
    } // web push methods

  }, {
    key: "__check_webpush_dict",
    value: function __check_webpush_dict(value, provider, caller) {
      if (!(0, _utils.is_object)(value)) {
        this.__errors.push("[".concat(caller, "] value must be a valid dict representing webpush-token"));

        return [value, provider, false];
      }

      if (!provider) {
        provider = "vapid";
      }

      if (!WEB_PUSH_VENDORS.includes(provider)) {
        this.__errors.push("[".concat(caller, "] unsupported webpush provider ").concat(provider));

        return [value, provider, false];
      }

      return [value, provider, true];
    }
  }, {
    key: "_add_webpush",
    value: function _add_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = arguments.length > 2 ? arguments[2] : undefined;

      var _this$__check_webpush = this.__check_webpush_dict(push_token, provider, caller),
          _this$__check_webpush2 = (0, _slicedToArray2["default"])(_this$__check_webpush, 3),
          value = _this$__check_webpush2[0],
          vendor = _this$__check_webpush2[1],
          is_valid = _this$__check_webpush2[2];

      if (!is_valid) {
        return;
      }

      this.__dict_append[CHANNEL_MAP.WEB_PUSH] = value;
      this.__dict_append[KEY_PUSHVENDOR] = vendor;
    }
  }, {
    key: "_remove_webpush",
    value: function _remove_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = arguments.length > 2 ? arguments[2] : undefined;

      var _this$__check_webpush3 = this.__check_webpush_dict(push_token, provider, caller),
          _this$__check_webpush4 = (0, _slicedToArray2["default"])(_this$__check_webpush3, 3),
          value = _this$__check_webpush4[0],
          vendor = _this$__check_webpush4[1],
          is_valid = _this$__check_webpush4[2];

      if (!is_valid) {
        return;
      }

      this.__dict_remove[CHANNEL_MAP.WEB_PUSH] = value;
      this.__dict_remove[KEY_PUSHVENDOR] = vendor;
    }
  }]);
  return _IdentityEventInternalHelper;
}();

exports["default"] = _IdentityEventInternalHelper;
module.exports = exports.default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _config = _interopRequireDefault(require("./config"));

var _workflow = _interopRequireDefault(require("./workflow"));

var _path = _interopRequireDefault(require("path"));

var _mimeTypes = _interopRequireDefault(require("mime-types"));

var _utils = require("./utils");

var _identity = _interopRequireDefault(require("./identity"));

var _event = _interopRequireDefault(require("./event"));

var package_json = require("../package.json");

var Suprsend = /*#__PURE__*/function () {
  function Suprsend(workspace_env, workspace_secret) {
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck2["default"])(this, Suprsend);
    this.env_key = workspace_env;
    this.env_secret = workspace_secret;
    this.config = config;
    this.base_url = this._get_url(config.base_url);
    this.auth_enabled = config.auth_enabled !== false;
    this.include_signature_param = config.include_signature_param !== false;
    this.user_agent = "suprsend/".concat(package_json.version, ";node/").concat(process.version.slice(1));
    this.user = new _identity["default"](this);
    this._eventcollector = new _event["default"](this);

    this._validate();
  }

  (0, _createClass2["default"])(Suprsend, [{
    key: "_validate",
    value: function _validate() {
      if (!this.env_key) {
        throw new _utils.SuprsendError("Missing Mandatory WORKSPACE_ENVIRONEMENT");
      } else if (!this.env_secret) {
        throw new _utils.SuprsendError("Missing Mandatory WORKSPACE_SECRET");
      } else if (!this.base_url) {
        throw new _utils.SuprsendError("Missing Mandatory base url");
      }
    }
  }, {
    key: "_get_url",
    value: function _get_url(base_url) {
      if (base_url) {
        base_url = base_url.trim();
      }

      if (!base_url) {
        if (this.config.is_staging) {
          base_url = _config["default"].staging;
        } else {
          base_url = _config["default"].prod;
        }
      }

      base_url = base_url.trim();

      if (!base_url.endsWith("/")) {
        base_url += "/";
      }

      return base_url;
    }
  }, {
    key: "add_attachment",
    value: function add_attachment(body, file_path) {
      if (!body.data) {
        body.data = {};
      }

      if (!body.data instanceof Object) {
        throw new _utils.SuprsendError("data must be an object");
      }

      var attachment = this._get_attachment_json_for_file(file_path);

      if (!body.data["$attachments"]) {
        body["data"]["$attachments"] = [];
      }

      body["data"]["$attachments"].push(attachment);
      return body;
    }
  }, {
    key: "_get_attachment_json_for_file",
    value: function _get_attachment_json_for_file(file_path) {
      var abs_path = _path["default"].resolve((0, _utils.resolveTilde)(file_path));

      return {
        filename: _path["default"].basename(abs_path),
        contentType: _mimeTypes["default"].lookup(abs_path),
        data: (0, _utils.base64Encode)(abs_path)
      };
    }
  }, {
    key: "trigger_workflow",
    value: function trigger_workflow(data) {
      var wf = new _workflow["default"](this, data);
      wf.validate_data();
      return wf.execute_workflow();
    }
  }, {
    key: "track",
    value: function track(distinct_id, event_name) {
      var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._eventcollector.collect(distinct_id, event_name, properties);
    }
  }]);
  return Suprsend;
}();

var _default = Suprsend;
exports["default"] = _default;
module.exports = exports.default;
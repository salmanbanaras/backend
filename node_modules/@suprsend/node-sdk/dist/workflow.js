"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _signature = _interopRequireDefault(require("./signature"));

var _jsonschema = require("jsonschema");

var _utils = require("./utils");

var _axios = _interopRequireDefault(require("axios"));

var workflow_schema = require("./request_json/workflow.json");

var Workflow = /*#__PURE__*/function () {
  function Workflow(ss_instance, data) {
    (0, _classCallCheck2["default"])(this, Workflow);
    this.ss_instance = ss_instance;
    this.data = data;
    this.url = this._get_url();
  }

  (0, _createClass2["default"])(Workflow, [{
    key: "_get_url",
    value: function _get_url() {
      var url_template = "/trigger/";

      if (this.ss_instance.include_signature_param) {
        if (this.ss_instance.auth_enabled) {
          url_template = url_template + "?verify=true";
        } else {
          url_template = url_template + "?verify=false";
        }
      }

      var url_formatted = "".concat(this.ss_instance.base_url).concat(this.ss_instance.env_key).concat(url_template);
      return url_formatted;
    }
  }, {
    key: "_get_headers",
    value: function _get_headers() {
      return {
        "Content-Type": "application/json",
        Date: new Date().toUTCString(),
        "User-Agent": this.ss_instance.user_agent
      };
    }
  }, {
    key: "execute_workflow",
    value: function () {
      var _execute_workflow = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var headers, content_text, signature, response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                headers = this._get_headers();
                content_text = JSON.stringify(this.data);

                if (this.ss_instance.auth_enabled) {
                  signature = (0, _signature["default"])(this.url, "POST", content_text, headers, this.ss_instance.env_secret);
                  headers["Authorization"] = "".concat(this.ss_instance.env_key, ":").concat(signature);
                }

                _context.prev = 3;
                _context.next = 6;
                return _axios["default"].post(this.url, content_text, {
                  headers: headers
                });

              case 6:
                response = _context.sent;
                return _context.abrupt("return", {
                  status_code: response.status,
                  success: true,
                  message: response.statusText
                });

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](3);
                return _context.abrupt("return", {
                  status_code: 400,
                  success: false,
                  message: _context.t0.message
                });

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 10]]);
      }));

      function execute_workflow() {
        return _execute_workflow.apply(this, arguments);
      }

      return execute_workflow;
    }()
  }, {
    key: "validate_data",
    value: function validate_data() {
      var _this$data;

      if (!((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.data)) {
        this.data.data = {};
      }

      if (!(this.data.data instanceof Object)) {
        throw new _utils.SuprsendError("data must be a object");
      }

      var schema = workflow_schema;
      var v = new _jsonschema.Validator();
      var validated_data = v.validate(this.data, schema);

      if (validated_data.valid) {
        return this.data;
      } else {
        var error_obj = validated_data.errors[0];
        var error_msg = "".concat(error_obj.property, " ").concat(error_obj.message);
        throw new _utils.SuprsendError(error_msg);
      }
    }
  }]);
  return Workflow;
}();

var _default = Workflow;
exports["default"] = _default;
module.exports = exports.default;
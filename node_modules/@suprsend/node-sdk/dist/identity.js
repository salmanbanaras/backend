"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = require("./utils");

var _signature = _interopRequireDefault(require("./signature"));

var _axios = _interopRequireDefault(require("axios"));

var _identity_helper = _interopRequireDefault(require("./identity_helper"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var UserIdentityFactory = /*#__PURE__*/function () {
  function UserIdentityFactory(config) {
    (0, _classCallCheck2["default"])(this, UserIdentityFactory);
    this.config = config;
  }

  (0, _createClass2["default"])(UserIdentityFactory, [{
    key: "new_user",
    value: function new_user(distinct_id) {
      if (!(0, _utils.is_string)(distinct_id)) {
        throw new _utils.SuprsendError("distinct_id must be a string. an Id which uniquely identify a user in your app");
      }

      distinct_id = distinct_id.trim();

      if (!distinct_id) {
        throw new _utils.SuprsendError("distinct_id must be passed");
      }

      return new UserIdentity(this.config, distinct_id);
    }
  }]);
  return UserIdentityFactory;
}();

exports["default"] = UserIdentityFactory;

var UserIdentity = /*#__PURE__*/function () {
  function UserIdentity(config, distinct_id) {
    (0, _classCallCheck2["default"])(this, UserIdentity);
    this.config = config;
    this.distinct_id = distinct_id;
    this.__url = this.__get_url();
    this.__supr_props = this.__super_properties();
    this.__errors = [];
    this.__info = [];
    this._append_count = 0;
    this._remove_count = 0;
    this._events = [];
    this._helper = new _identity_helper["default"](distinct_id, config.env_key);
  }

  (0, _createClass2["default"])(UserIdentity, [{
    key: "__get_url",
    value: function __get_url() {
      var url_template = "event/";

      if (this.config.include_signature_param) {
        if (this.config.auth_enabled) {
          url_template = url_template + "?verify=true";
        } else {
          url_template = url_template + "?verify=false";
        }
      }

      return "".concat(this.config.base_url).concat(url_template);
    }
  }, {
    key: "__get_headers",
    value: function __get_headers() {
      return {
        "Content-Type": "application/json; charset=utf-8",
        Date: new Date().toUTCString(),
        "User-Agent": this.config.user_agent
      };
    }
  }, {
    key: "__super_properties",
    value: function __super_properties() {
      return {
        $ss_sdk_version: this.config.user_agent
      };
    }
  }, {
    key: "__get_events",
    value: function __get_events() {
      var all_events = this._events;

      var _iterator = _createForOfIteratorHelper(all_events),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;
          e["properties"] = this.__supr_props;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (this._append_count > 0) {
        var user_identify_event = {
          $insert_id: (0, _utils.uuid)(),
          $time: (0, _utils.epoch_milliseconds)(),
          env: this.config.env_key,
          event: "$identify",
          properties: _objectSpread({
            $anon_id: this.distinct_id,
            $identified_id: this.distinct_id
          }, this.__super_properties)
        };
        all_events.push(user_identify_event);
      }

      return all_events;
    }
  }, {
    key: "__validate_body",
    value: function __validate_body() {
      if (!(0, _utils.is_empty)(this.__info)) {
        console.log("WARNING: " + this.__info.join("\n"));
      }

      if (!(0, _utils.is_empty)(this.__errors)) {
        throw new _utils.SuprsendError("ERROR: " + this.__errors.join("\n"));
      }

      if ((0, _utils.is_empty)(this._events)) {
        throw new _utils.SuprsendError("ERROR: no user properties have been edited. Use user.append/remove/unset method to update user properties");
      }
    }
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var headers, events, content_text, signature, response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.__validate_body();

                headers = this.__get_headers();
                events = this.__get_events();
                content_text = JSON.stringify(events);

                if (this.config.auth_enabled) {
                  signature = (0, _signature["default"])(this.__url, "POST", content_text, headers, this.config.env_secret);
                  headers["Authorization"] = "".concat(this.config.env_key, ":").concat(signature);
                }

                _context.prev = 5;
                _context.next = 8;
                return _axios["default"].post(this.__url, content_text, {
                  headers: headers
                });

              case 8:
                response = _context.sent;
                return _context.abrupt("return", {
                  status_code: response.status,
                  success: true,
                  message: response.statusText
                });

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](5);
                return _context.abrupt("return", {
                  status_code: 400,
                  success: false,
                  message: _context.t0.message
                });

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[5, 12]]);
      }));

      function save() {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "_collect_event",
    value: function _collect_event() {
      var resp = this._helper.get_identity_events();

      if (!(0, _utils.is_empty)(resp["errors"])) {
        this.__errors = [].concat((0, _toConsumableArray2["default"])(this.__errors), (0, _toConsumableArray2["default"])(resp["errors"]));
      }

      if (!(0, _utils.is_empty)(resp["info"])) {
        this.__info = [].concat((0, _toConsumableArray2["default"])(this.__info), (0, _toConsumableArray2["default"])(resp["info"]));
      }

      if (!(0, _utils.is_empty)(resp["event"])) {
        this._events.push(resp["event"]);

        this._append_count += resp["append"];
        this._remove_count += resp["remove"];
        this._unset_count += resp["unset"];
      }
    }
  }, {
    key: "append",
    value: function append(key, value) {
      var caller = "append";

      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));

        return;
      }

      if ((0, _utils.is_string)(key)) {
        if (!value) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));

          return;
        } else {
          this._helper._append_kv(key, value, {}, caller);

          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._append_kv(item, key[item], key, caller);
        }

        this._collect_event();
      }
    }
  }, {
    key: "remove",
    value: function remove(key, value) {
      var caller = "remove";

      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));

        return;
      }

      if ((0, _utils.is_string)(key)) {
        if (!value) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));

          return;
        } else {
          this._helper._remove_kv(key, value, {}, caller);

          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._remove_kv(item, key[item], key, caller);
        }

        this._collect_event();
      }
    }
  }, {
    key: "add_email",
    value: function add_email(email) {
      var caller = "add_email";

      this._helper._add_email(email, caller);

      this._collect_event();
    }
  }, {
    key: "remove_email",
    value: function remove_email(email) {
      var caller = "remove_email";

      this._helper._remove_email(email, caller);

      this._collect_event();
    }
  }, {
    key: "add_sms",
    value: function add_sms(mobile_no) {
      var caller = "add_sms";

      this._helper._add_sms(mobile_no, caller);

      this._collect_event();
    }
  }, {
    key: "remove_sms",
    value: function remove_sms(mobile_no) {
      var caller = "remove_sms";

      this._helper._remove_sms(mobile_no, caller);

      this._collect_event();
    }
  }, {
    key: "add_whatsapp",
    value: function add_whatsapp(mobile_no) {
      var caller = "add_whatsapp";

      this._helper._add_whatsapp(mobile_no, caller);

      this._collect_event();
    }
  }, {
    key: "remove_whatsapp",
    value: function remove_whatsapp(mobile_no) {
      var caller = "remove_whatsapp";

      this._helper._remove_whatsapp(mobile_no, caller);

      this._collect_event();
    }
  }, {
    key: "add_androidpush",
    value: function add_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = "add_androidpush";

      this._helper._add_androidpush(push_token, provider, caller);

      this._collect_event();
    }
  }, {
    key: "remove_androidpush",
    value: function remove_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = "remove_androidpush";

      this._helper._remove_androidpush(push_token, provider, caller);

      this._collect_event();
    }
  }, {
    key: "add_iospush",
    value: function add_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = "add_iospush";

      this._helper._add_iospush(push_token, provider, caller);

      this._collect_event();
    }
  }, {
    key: "remove_iospush",
    value: function remove_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = "remove_iospush";

      this._helper._remove_iospush(push_token, provider, caller);

      this._collect_event();
    }
  }, {
    key: "add_webpush",
    value: function add_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = "add_webpush";

      this._helper._add_webpush(push_token, provider, caller);

      this._collect_event();
    }
  }, {
    key: "remove_webpush",
    value: function remove_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = "remove_webpush";

      this._helper._remove_webpush(push_token, provider, caller);

      this._collect_event();
    }
  }]);
  return UserIdentity;
}();

module.exports = exports.default;